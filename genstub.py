#!/usr/bin/env python3
# encoding: utf-8
# Copyright (C) 2023 John TÃ¶rnblom
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING. If not see
# <http://www.gnu.org/licenses/>.

import argparse
import logging
import os
import string
import sys

import xml.etree.ElementTree as ET

from pathlib import Path
from elftools.elf.elffile import ELFFile


logger = logging.getLogger('trampgen')


# read NIDs from nid_db.xml
NID_DB = (os.path.dirname(__file__) or '.') + '/nid_db.xml'
nid_map = {entry.get('obf'): entry.get('sym')
           for entry in ET.parse(NID_DB).getroot()}


# Header template
tmpl_head = string.Template('''/*
 This file was generated by genstub.py, do not edit manually!
*/''')


# Dependencies template
tmpl_deps = string.Template('''
int sprx_dlsym(unsigned int handle, const char *nid, void *addr);
int sprx_dlopen(const char* libname, unsigned short *handle);
int sprx_dlclose(unsigned int handle);''')


# Function template
tmpl_func = string.Template('''
static __attribute__ ((used)) void* __ptr_$name;
asm(".intel_syntax noprefix\\n"
    ".global $name\\n"
    ".type $name @function\\n"
    "$name:\\n"
    "jmp qword ptr [rip + __ptr_$name]\\n");''')


def symbols(sym_type, filename):
    '''
    yield symbol names in PT_DYNAMIC segments using the NID lookup table
    'nid_db.xml'.
    '''
    with open(filename, 'rb') as f:
        elf = ELFFile(f)

        for segment in elf.iter_segments():
            if segment.header.p_type != 'PT_DYNAMIC':
                continue

            for sym in segment.iter_symbols():
                if sym_type != sym.entry['st_info']['type']:
                    continue

                if sym.entry['st_shndx'] == 'SHN_UNDEF':
                    continue

                if not sym.name:
                    continue

                nid, lid, mid = sym.name.split('#')
                if not nid in nid_map:
                    logger.warning(f'skipping unknown NID {nid}')
                    continue

                yield nid_map[nid], nid


if __name__ == '__main__':
    logging.basicConfig(level=logging.WARNING)

    parser = argparse.ArgumentParser()
    parser.add_argument('SPRX_FILE')
    cli_args = parser.parse_args()

    libname = Path(cli_args.SPRX_FILE).stem
    filename = cli_args.SPRX_FILE

    funcs = sorted(set(symbols('STT_FUNC', filename)))
    gvars = sorted(set(symbols('STT_OBJECT', filename)))

    if not funcs: # and not gvars:
        sys.exit(0)

    print(tmpl_head.substitute())
    print(tmpl_deps.substitute())

    for name, nid in funcs:
            print(tmpl_func.substitute(name=name))

    print('')
    print('static unsigned short __handle = 0;')
    print('static void __attribute__((constructor(104)))')
    print('__constructor(void) {')
    if libname in ('libkernel', 'libkernel_sys', 'libkernel_web'):
        print('  __handle = 0x2001;')
    elif libname == 'libSceLibcInternal':
        print('  __handle = 0x2;')
    else:
        print(f'  if(sprx_dlopen("{libname}", &__handle)) return;')
    for name, nid in funcs:
        print(f'  if(sprx_dlsym(__handle, "{nid}", &__ptr_{name})) return;')
    print('}')

    if not libname in ('libkernel', 'libkernel_sys', 'libkernel_web', 'libSceLibcInternal'):
        print('')
        print('static void __attribute__((destructor(104)))')
        print('__destructor(void) {')
        print(f'  sprx_dlclose(__handle);')
        print('}')
